每个 CRUD 应用程序使用哪个 HTTP 状态代码
HTTP 规范定义了许多我们在响应客户端时可以使用的状态码。有些 API 只使用最基本的代码，并在其之上定义了自己的错误信号机制；其他人则希望充分利用 HTTPS 收集的代码来告诉他们的客户发生了什么。如果你属于后者，这篇文章适合你。本指南介绍了各种 CRUD 操作以及您应该使用哪些状态代码来进行干净的 API 设计。

HTTP 状态码永久链接
状态码是一个大于 100 且小于 600 的数字，它是 HTTP 响应的一部分。第一个数字定义状态的类别。状态码带有一个原因短语。该代码用于程序识别，该短语用于人类理解发生的事情。

每个状态代码都必须遵循这两个规则，甚至是自定义规则（是的，状态代码是可扩展的）。

状态类永久链接
如果我们了解状态码所在的类，我们可以更快地定位问题。

100 - 199永久链接
这些是信息状态代码；他们通常会告诉客户端请求的头部部分已经收到，服务器会尝试遵从客户端的传输需求。就像使用不同的协议或在客户端开始发送正文之前告诉客户端其请求将失败。

200 - 299永久链接
这些是成功代码。他们告诉客户其请求已被接受。在异步处理请求 (202) 的情况下，这并不意味着请求已成功处理，只是它在发送时满足了所有验证要求。

300 - 399永久链接
这些是重定向代码。他们告诉客户他们请求的资源在预期的位置不再可用。这可能有多种原因，可能是临时的或永久的，但客户端必须向新位置发出请求。

400 - 499永久链接
这些是客户端错误代码。它们都是关于客户端发送到服务器的无效请求。这有几个原因，超时、错误的 URI、缺少身份验证等。客户端发送的输入不正确，应在重试请求之前确认输入参数正确。

500 - 599永久链接
这些是服务器错误代码。它们通常表示服务器不堪重负或代理服务器无法访问的问题，但有时它们可​​能与触发服务器上的错误异常的客户端请求直接相关。这些错误可能是暂时的，也可能是永久性的。通常最好让客户端重试相同的请求。

自定义类永久链接
自定义类，即 599 以上的类是不允许的，但无论如何都会被某些服务使用。对于 API 设计者来说，它们是相关的坏例子。然而，API 客户端创建者必须处理它们。

因此，虽然它们通常不被允许，但请准备好在野外遇到它们。

CRUD（创建、读取、更新、删除）永久链接
CRUD 模型为持久存储定义了最基本的 API 操作。创建、读取、更新和删除。它们构成了 API 端点的最大份额。让我们看看哪些状态码符合他们的要求。

创造永久链接
创建操作通常通过 HTTPsPOST方法实现。在 RESTful API 中，这些端点用于创建新资源或访问令牌。

状态码

200 OK - 这是告诉客户一切顺利的基本状态代码。由于我们在创建访问令牌时不创建端点可访问资源，因此我们可以使用 200 作为该操作的状态。
201 Created - 最适合 Create 操作。此代码应发出后端资源创建的信号，并附带一个标头，该Location标头为该新创建的资源定义最具体的 URL。在响应正文中包含资源的适当表示或该资源的至少一个或多个 URL 也是一个好主意。
202 Accepted - 通常用于异步处理。此代码告诉客户端该请求是有效的，但它的处理将在未来某个时间完成。响应正文应包含一个指向已完成资源的 URL，其中包含有关何时可用的一些信息，或者一个指向某个监视端点的 URL，该 URL 会告诉客户端资源何时可用。
303 See Other - 与 202 代码类似，但使用Location标头字段来响应通知客户端有关已创建资源的位置或允许客户端检查创建过程状态的端点。一些客户端自动遵循重定向类的状态代码。此代码通常仅用于POST请求。
读永久链接
读取操作通过 HTTPsGET方法实现并用于获取资源表示。异步响应在这里没什么大不了的，因为异步处理的原因通常是资源还不存在并且必须创建，所以无论如何它都是一个创建动作。

状态码

200 OK - 大多数读取操作都会以 200 OK 状态回答。
206 Partial Content - 此代码对于太大而无法在一个响应中传递的内容列表很有用。它必须与Range请求中的标头字段一起使用。通常，这个头域定义了后端应该发送给客户端的字节范围，但是只要双方都理解，单位可以自由分配。
300 Multiple Choices - 如果一个资源有多个表示并且客户端（或其用户）必须选择其中之一，则使用此重定向。
308 永久重定向- 这告诉客户端使用另一个 URL 来访问资源并且不再使用当前 URL。当我们为一个资源有多个端点但又不想实现从所有端点读取时，这很有帮助。
304 Not Modified - 与 200 一样使用，但没有正文，因此客户端将被重定向到以前读取的本地缓存表示。
307 临时重定向- 当资源的 URL 将来可能更改时，客户端应始终在访问真实 URL 之前询问当前 URL。
更新永久链接
可以使用 HTTPPUT或PATCH方法来实现更新。不同之处在于客户端必须发送到后端的数据量。

PUT要求客户端发送资源的完整表示来更新它。（用新的替换旧的）

PATCH要求客户端只发送资源的部分表示来更新它。（在旧版本中添加、更新或删除这些部分）

状态码

200 OK - 这是最适合大多数用例的代码。
204 No Content - 不向客户端返回数据的更新的正确代码，例如仅保存当前编辑的文档时。
202 Accepted - 如果更新是异步完成的，则可以使用此代码。它应该包括一个用于访问更新资源的 URL 或一个用于检查更新是否成功的 URL。它还可以包括估计更新需要多长时间。
删除永久链接
删除动作可以用 HTTPDELETE方法来实现。

状态码

200 OK - 有些人认为任何类型的删除函数都应该返回已删除的元素，因此已删除元素的表示可以包含在响应正文中。
204 No Content - 最适合这种情况的状态代码。最好减少流量并简单地告诉客户端删除完成并且不返回响应正文（因为资源已被删除）。
202 Accepted - 如果删除是异步的并且需要一些时间，在分布式系统中就是这种情况，则可以适当地返回此代码以及一些信息或 URL，以告诉客户端何时将其删除。
API 更改永久链接
如果我们的 API 存在的时间足够长，它迟早会改变它的结构。避免破坏性更改是最佳实践，状态代码的重定向类可以帮助解决此问题，因为某些客户端会Location自动跟随其标头。

状态码

307 临时重定向- 如果资源将来可以在不同的 URL 上可用，这是正确的代码，但我们希望当前端点控制客户端重定向到的位置。此状态代码将让客户端针对每个请求返回到当前 URL。
308 永久重定向- 如果资源现在可以在新 URL 上使用，并且客户端将来应该通过新 URL 直接访问它，那么这是正确的代码。如果资源 URL 再次更改必须从新 URL 发出，则当前端点无法控制客户端在请求和后续重定向之后的行为。
一个资源的多个端点永久链接
如果我们选择在我们的 API 中使用嵌套或子资源，它可以帮助仅从根（非嵌套）资源传递表示以保持实现 DRY。重定向状态代码对此有所帮助。

状态码

308 永久重定向- 如果我们有嵌套资源/user/kay/comments/456和/posts/123/comments/456；和根资源/comments/456，它可以使事情更容易在嵌套资源中简单地发出 308 重定向，并且Location标头字段指向根资源，因此并非每个端点都需要交付实现。这只应针对GET请求进行。
错误永久链接
API 的下一个重要部分是它的错误。许多 API 框架在出现问题时默认使用 500 和 404 状态码，但根据情况，通常会有更多描述性的状态码。

500 表示Internal Server Error，它可以是任何内容，从后端访问但未检查其存在的缺失标头字段到后端想要调用的无法访问的第三方服务。

因此，可能是客户端做错了什么，我们期望一个 400-499 状态码，但后端从未尝试验证请求并尝试处理它，即使它是无效的，我们最终会出现服务器错误。

404 表示未找到。这可能是因为客户端使用的指向某个端点的错误 URL 未在后端正确设置。

正如我们看到的 404 是客户端错误状态代码，但很可能是我们在后端做错了什么。

错误的网址永久链接
当客户端发送 URL 时，我们不知道。这可能有多种不同的原因，因此我们必须检查其中哪些适用于此。

状态码

404 Not Found - 这是最自然的响应，应该在客户端 URL 错误的情况下使用。
405 Method Not Allowed - 在许多框架中，我们将 URL 与 HTTP 方法一起定义，因此删除其中一个定义可能会使除一种方法之外的所有方法保留到一个 URL 不变。响应必须包含一个Allow标头字段，其中列出了允许执行的操作。
501 Not Implemented - 与 405 类似，但后端的所有资源都缺少该方法。
406 Not Acceptable - URL 存在，但后端无法发送客户端将接受的表示。因此，对于该特定客户端，URL 的行为类似于 404，但他们现在知道需要更新客户端。
410 Gone - 这就像 404，但我们知道该资源过去存在，但它被删除或以某种方式移动，我们不知道在哪里。
414 Request-URI Too Long - 当端点正确且资源存在时，有时会出现这种情况，但查询会使 URL 太长而无法解释。
308 永久重定向- 如果我们知道资源已移动到不同的 URL 并且我们可以告诉客户端，这将是正确的代码。
307 临时重定向- 与 308 相同，但我们不知道该资源将来是否会回到原始 URL 或另一个不同的 URL。
没有权限永久链接
通常客户端无法访问后端的所有资源，因此我们需要一种方法来告诉他们。

状态码

401 Unauthorized - 客户端尚未授权自己到后端，服务器可能会在此之后授予它访问权限。
403 Forbidden - 客户端已经授权或不需要自己授权，但仍然没有访问资源的权限。
404 Not Found - 如果是 401 或 403，但出于安全原因，后端不想告诉客户端资源存在。
结论永久链接
HTTP 的创建者在设计时考虑了许多状态码，甚至多年来添加了许多新的状态码。如果使用得当，它们可以通过利用客户的自动重定向跟踪并更清楚地解释发生的事情来帮助极大地改善开发人员体验。

有时我们可以为一个特定情况使用多个代码，重要的是我们在整个 API 表面上保持我们的使用一致。