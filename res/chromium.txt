时间：2023-04 版本：113

chromium 在线源代码阅读：
https://cs.chromium.org/chromium/src/t


编译教程（Android）：
https://chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/android_build_instructions.md


-------------------编译参考指令--------------------
1：git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
2：export PATH="$PATH:~/depot_tools"
3：mkdir ~/chromium && cd ~/chromium
4：fetch --no-history --nohooks android
5：cd src
6：echo "target_os = [ 'android' ]" >> ../.gclient
7：如果中途网络中断执行 gclient sync
8：build/install-build-deps.sh --android
9：gclient runhooks
10：gn args out/Default（添加编译参数，具体设置参考如下）
11：autoninja -C out/Default chrome_public_apk（开始编译，漫长的等待！完成后可以在 out/Default/apks 下找到安装包）
---------------------------------------------------

-------------------编译跟多指令--------------------
cd src
bash build/install-build-deps.sh --android
export PATH="/media/user/chrome/src/third_party/depot_tools:$PATH"
bash third_party/depot_tools/gn clean out/Default
bash third_party/depot_tools/gn args out/Default
bash third_party/depot_tools/autoninja -C out/Default -j12 chrome_public_apk
bash third_party/depot_tools/autoninja -C out/Default -j12 weblayer_instrumentation_test_apk
bash third_party/depot_tools/autoninja -C out/Default -j12 content_shell_apk
bash third_party/depot_tools/autoninja -C out/Default -j12 system_webview_apk
bash third_party/depot_tools/autoninja -C out/webview -j12 webview_instrumentation_apk

------------[gn args out/Default --list]------------
#args.gn文件
target_os = "android"
target_cpu = "arm"

#改包名
chrome_public_manifest_package = "cg.chromium.test"

#不把警告作为错误，否则有一定可能性遭遇警告转来的编译错误
treat_warnings_as_errors = false

#设置true时编译debug版本，false时编译release版本，默认为false。
is_debug = false

#使用Chromium官方的编译优化
is_official_build = true

#在 Android 上构建的渠道：stable, beta, dev, canary, work, 或者 default（用于非官方构建）
android_channel = "stable"
#将静态分析步骤卸载到构建服务器。如果您想完全关闭静态分析，请将此设置为 "off"
android_static_analysis = "off"

#如果我们想要构建 ANGLE 测试套件，则为真。 在大多数配置中默认打开。
angle_build_tests = false

blink_symbol_level = 0
build_contextual_search = false
build_dawn_tests = false

disable_android_lint = true

enable_component_updater = false
enable_extensions = false
enable_gvr_services = false
enable_keystone_registration_framework = false
enable_message_center = false
enable_nacl = false
enable_pdf = false
enable_plugins = false
enable_ppapi = false
enable_reading_list = false
enable_remoting = false
enable_reporting = false
enable_stripping = true
enable_updater = false
enable_vr = false
exclude_unwind_tables = true

#解码器
ffmpeg_branding = "Chrome"

include_branded_entitlements = false
include_transport_security_state_preload_list = false

#设置true时会把声明为components的目标作为共享库动态加载，一般在编译debug版本时
#会设置为true，这样每次改动编译链接花费的时间就会减少很多。若为false，则组件将采用静态链接。
#is_component_build = true #默认 = is_debug
#禁用 ProGuard（缓慢的构建步骤）off 将启用proguard。
#is_java_debug = false #默认 = is_debug

optimize_for_size = true

#支持H264编码
proprietary_codecs = true

rtc_build_examples = false
rtc_build_tools = false

symbol_level = 0

#不使用官方API秘钥
use_official_google_api_keys = false

v8_symbol_level = 0




	#解决签名的问题
	android_keystore_name = "hello"
	android_keystore_password = "hello"
	android_keystore_path = "//build/android/hello-app.jks"


--------------------修改源代码--------------------

修改应用名称：
	源码路径：/chromium/src/chrome/android/java/res_chromium_base/values/channel_constants.xml
	<resources xmlns:android="http://schemas.android.com/apk/res/android">
		<string name="app_name" translatable="false">应用名称</string>
	</resources>


修改应用图标：
	源码路径：/chromium/src/chrome/android/java/res_chromium_base
	在这个目录下，有几个mipmap-文件夹，把里面的图标替换下
	源码路径：/chromium/src/chrome/android/java/res_chromium
	在这个目录下，有几个drawable-文件夹，把里面的图标替换下


默认不加载新标签页：
	源码路径：/chromium/src/components/embedder_support/android/java/src/org/chromium/components/embedder_support/util/UrlConstants.java
	把下面两个参数，改成你想要显示的网页地址就可以了：
	public static final String NTP_URL = "chrome-native://newtab/";
	public static final String NTP_NON_NATIVE_URL = "chrome://newtab/";


屏蔽启动引导页：
	源码路径：/chromium/src/chrome/android/java/src/org/chromium/chrome/browser/init/AsyncInitializationActivity.java
	将requiresFirstRunToBeCompleted方法的返回值修改为false：
	/**
	* Overriding this function is almost always wrong.
	* @return Whether or not the user needs to go through First Run before using this Activity.
	*/
	protected boolean requiresFirstRunToBeCompleted(Intent intent) {
		return false;
	}
	源码路径：/chromium/src/chrome/android/java/src/org/chromium/chrome/browser/LaunchIntentDispatcher.java
	删除或注释掉dispatch方法中下面的判断逻辑：
	// Check if we should push the user through First Run.
	if (FirstRunFlowSequencer.launch(mActivity, mIntent, false /* requiresBroadcast */,
				false /* preferLightweightFre */)) {
		return Action.FINISH_ACTIVITY;
	}


修改版本号（未测试）：
	源码路径：/chromium/src/chrome/android/java/AndroidMainfest.xml
	在manifest节点中，增加版本属性就可以了，注意这个修改不会影响到浏览器中显示的内核版本号：
	<manifest xmlns:android="http://schemas.android.com/apk/res/android"
		xmlns:tools="http://schemas.android.com/tools"
		package="{{ manifest_package }}"
		{% set definitions_in_split = definitions_in_split|default(0) == 'true' %}
		{% if definitions_in_split %}
		android:isolatedSplits="true"
		{% endif %}
		tools:ignore="MissingVersion"
		android:versionCode="10000"
		android:versionName="1.00.00">
		...
	</manifest>    











6.应用全屏显示
源码路径：
/chromium/src/chrome/android/java/res/values-sw600dp-v17/styles.xml
/chromium/src/chrome/android/java/res/values-sw600dp-v26/styles.xml
/chromium/src/chrome/android/java/res/values-v26/styles.xml
在上面的源码中，找到TabbedModeTheme主题，增加下面的全屏设置属性：
<style name="TabbedModeTheme" parent="MainTheme">
	<item name="windowNoTitle">true</item>
	<item name="windowActionBar">false</item>
	<item name="android:windowFullscreen">true</item>
	<item name="android:windowActionBar">false</item>
</style>


7.移除首页的所有菜单栏
源码路径：/chromium/src/chrome/android/java/res_app/layout/main.xml
在CoordinatorLayoutForPointer控件中，增加layout_marginTop属性，其实是往上移动了UI，把菜单栏隐藏了：
<merge
	xmlns:android="http://schemas.android.com/apk/res/android"
	xmlns:app="http://schemas.android.com/apk/res-auto">
	...
	<org.chromium.components.browser_ui.widget.CoordinatorLayoutForPointer
		android:id="@+id/coordinator"
		android:layout_width="match_parent"
		android:layout_height="match_parent"
		android:layout_weight="1" 
		android:layout_marginTop="-96dp"> #主要加这个
</mergr>        



对于除 arm64 之外的所有架构，我们禁用帧指针以减小二进制大小（搜索enable_frame_pointers）。


